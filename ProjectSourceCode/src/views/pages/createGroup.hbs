{{> header}}
<style>
    .form-group {
        margin-bottom: 1rem;
    }
    .form-input { /* Base styles */ background-color: rgba(12, 12, 12, 0.5);
        color: #C8C8C8; display: block; width: 100%; height: 7vh; padding: 1rem 1rem;
        border: 1px solid rgba(0, 0, 0, 0); border-radius: 13px; font-size: 1em;
        box-sizing: border-box; margin-right: 1.5vw; /* Include padding in width */ /*
        Focus styles */ &:focus { outline: none; /* Remove default outline */
        border-color: #00FF94; /* Change border color on focus */ } 
    }
    .form-group button {
        display: block;
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    .form-group input[type="text"]:focus,
    .form-group button:focus {
        border-color: #80bdff;
        outline: 0;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .form-group button {
        margin-top: 0.5rem;
    }

    .form-group ul {
        list-style-type: none;
        padding: 0;
    }

    .form-group ul li {
        margin-bottom: 0.5rem;
    }
    .box {
        padding-top: 2vh;
        padding-bottom: 2vh;
        padding-right: 3vw;
        padding-left: 3vw;
        backdrop-filter: blur(35px);
        background: rgba(12, 12, 12, 0.4);
        box-shadow: 0px 0px 15px rgba(6, 6, 6, 0.35);
        border-radius: 20px;
        margin-top: 5vh;
        margin-bottom: 5vh;
    }

    .sectionHeader {
        margin-bottom: 2vh;
        display: flex;
        justify-content: space-between;
        align-items: center;
        column-gap: 1vw;
    }

    .containerArea {
        display: flex;
        flex-direction: column;
        row-gap: 2vh;
    }

</style>
{{> nav}}

<div class="container">
    <!--Header Text-->
    <div class="sectionHeader" style="margin-top: 5vh;">
        <h3>Create a new Group</h3>
    </div>
    <!-- Header Text-->

        <form id="createGroupForm">
            <div class="containerArea">
                <div class="containerArea">
                    <input class="form-input" type="text" id="groupName" placeholder="Group Name..." required>
                    {{> wideButton id="confirmNameButton" buttonText="Confirm Name"}}
                </div>
                <!--Header Text-->
                <div class="sectionHeader" style="margin-top: 5vh;">
                    <h3>Add friends</h3>
                </div>
                <!-- Header Text-->
                <div class="containerArea">
                    <input class="form-input" type="text" id="search" placeholder="Add friends to group..." disabled>
                    <button
                        class="btn btn-lg btn-primary btn-block"
                        id="addUserButton"
                        style="background-color: #00FF94; color: #0C0C0C; border-color: #00FF94;"
                        disabled
                    >Add User</button>
                </div>
                <div>
                    <ul id="groupMembers"></ul>
                </div>
                <form action="/groups" method="POST" class="form-group">
                    <!-- Your form fields here -->
                    {{> wideButton id="submitButton" type="submit" buttonText="Create Group"}}
                </form>
            </div>
        </form>
    </div>
</div>

{{> footer}}
<script>
$(document).ready(function(){
    let usersToAdd = [];
    // Enable the rest of the form when the confirmNameButton is clicked and the groupName field is not empty
    document.querySelector('#confirmNameButton').addEventListener('click', function() {
        event.preventDefault();
        const groupName = document.querySelector('#groupName').value;
        if (groupName === "") {
            alert("Group name cannot be empty");
            return;
        }
        fetch('/createGroup', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify({
            group_name: groupName
            })
        })
        .then(response => response.json())
        .then(data => {
            console.log(data);
            // If the group is successfully created, enable the rest of the form
            if (data.status === 200) {

                document.querySelector('#search').disabled = false;
                document.querySelector('#addUserButton').disabled = false;
                document.querySelector('#createGroupForm button[type="submit"]').disabled = false;
                document.querySelector('#confirmNameButton').disabled = true;
                document.querySelector('#groupName').disabled = true;
            }
            else {
                alert("You are already the admin of a group named " + groupName);
                document.querySelector('#groupName').value = "";
            }
        })
        .catch((error) => {
            console.error('Error:', error);
        });
    });
});
document.querySelector("#search").addEventListener("input", function() {
    const searchQuery = this.value;
    fetch("/searchFriends?q=" + searchQuery)
        .then(response => response.json())
        .then(data => {
            // clear the friend list

            // populate the friend list with the returned data
            data.forEach(function(friend) {
                const li = document.createElement('li');
                li.textContent = friend.username;
                document.querySelector("#groupMembers").appendChild(li);
            });
        })
        .catch(error => console.error('Error:', error));
});
document.querySelector("#addUserButton").addEventListener("click", function() {
    event.preventDefault();
    const friend_username = document.getElementById("search").value;
    const groupName = document.getElementById("groupName").value;
    fetch('/addUserToGroup', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ friend_username, groupName }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.status === "success") {
            alert(`${friend_username} was added to group ${groupName}`);
            // Create a new list item with the username and append it to the list
            const listItem = document.createElement("li");
            listItem.textContent = friend_username;
            document.querySelector("#groupMembers").appendChild(listItem);
            // Clear the search field
            document.querySelector("#search").value = "";
        } else{
            alert(`Either ${friend_username} doesn't exist, or you aren't friends.`);
            // Clear the search field
            document.querySelector("#search").value = "";
        }
    })
    .catch((error) => {
        console.error('Error:', error);
    });
});
document.querySelector('#submitButton').addEventListener('click', function(event) {
    event.preventDefault();
    const groupMembersNodeList = document.querySelectorAll('#groupMembers li');
    const groupMembers = Array.from(groupMembersNodeList).map(li => li.textContent);
    const groupName = document.querySelector('#groupName').value;
    fetch('/addGroupMembers', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ groupName, groupMembers }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.status === "success") {
            alert(`Group ${groupName} was created with members ${groupMembers.join(', ')}`);
            window.location.href = `/group${groupName}`;
        } else {
            alert(data.message);
        }
    })
    .catch((error) => {
        console.error('Error:', error);
    });
});
</script>